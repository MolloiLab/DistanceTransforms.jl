steps:
  - label: "CPU: Julia v{{matrix.version}}"
    matrix:
      setup:
        version:
          - "1.10"
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.version}}"
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())' || exit 3

      julia -e 'println("--- :julia: Running tests")
          using Pkg
          Pkg.test("DistanceTransforms"; coverage=true, julia_args=`--threads=auto`)'
    agents:
      queue: "juliagpu"
    timeout_in_minutes: 5

  - label: "CUDA: Julia {{matrix.version}}"
    matrix:
      setup:
        version:
          - "1.10"
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.version}}"
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.add("CUDA")' || exit 3

      julia -e 'println("--- :julia: Running tests")
                using Pkg
                Pkg.test("DistanceTransforms"; coverage=true, test_args=["CUDA"])'
    agents:
      queue: "juliagpu"
      cuda: "*"
    timeout_in_minutes: 5

  - label: "Metal: Julia {{matrix.version}}"
    matrix:
      setup:
        version:
          - "1.10"
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.version}}"
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.add("Metal")' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("DistanceTransforms"; coverage=true, test_args=["Metal"])'
    agents:
      queue: "juliaecosystem"
      os: "macos"
      arch: "aarch64"
    timeout_in_minutes: 5

  - label: "oneAPI: Julia {{matrix.version}}"
    matrix:
      setup:
        version:
          - "1.10"
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.version}}"
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.add("oneAPI")' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("DistanceTransforms"; coverage=true, test_args=["oneAPI"])'
    agents:
      queue: "juliagpu"
      intel: "*"
    timeout_in_minutes: 5

  - label: "AMDGPU: Julia {{matrix.version}}"
    matrix:
      setup:
        version:
          - "1.10"
    plugins:
      - JuliaCI/julia#v1:
          version: "{{matrix.version}}"
      - JuliaCI/julia-coverage#v1:
          codecov: true
    command: |
      julia -e 'println("--- :julia: Instantiating project")
                using Pkg
                Pkg.develop(; path=pwd())
                Pkg.add("AMDGPU")' || exit 3

      julia -e 'println("+++ :julia: Running tests")
                using Pkg
                Pkg.test("DistanceTransforms"; coverage=true, test_args=["AMDGPU"])'
    agents:
      queue: "juliagpu"
      rocm: "*"
    timeout_in_minutes: 5