{
  "hash": "ebc8a14b03ea6940da10b7ab8538839f",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"Overview\"\nsidebar: julia\nformat:\n  html:\n    toc: true\n    cold-fold: true\nexecute:\n  engine: julia\n---\n\n\n\n\nDistanceTransforms.jl is a high-performance Julia package for computing distance transforms. It offers significant performance improvements over traditional implementations, especially for large arrays.\n\n## Installation\n\nInstall DistanceTransforms.jl using Julia's package manager:\n\n```julia\nusing Pkg\nPkg.add(\"DistanceTransforms\")\n```\n\n## Quick Example\n\n\n\n\n::: {#2 .cell execution_count=1}\n``` {.julia .cell-code}\nusing DistanceTransforms: transform, boolean_indicator\nusing CairoMakie: Figure, Axis, heatmap!\n\n# Create a sample binary array\narr = rand([0, 1], 10, 10)\n\n# Apply distance transform\nresult = transform(boolean_indicator(arr))\n\n# Visualize\nfig = Figure(size = (800, 400))\nax1 = Axis(fig[1, 1], title = \"Original\")\nax2 = Axis(fig[1, 2], title = \"Distance Transform\")\nheatmap!(ax1, arr, colormap = :grays)\nheatmap!(ax2, result, colormap = :grays)\nfig\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](index_files/figure-html/cell-2-output-1.svg){}\n:::\n:::\n\n\n\n\n\n\n## Key Features\n\n- **Fast Distance Transform**: Employs the efficient Felzenszwalb algorithm\n- **Multi-threading**: Parallelized computation on CPU\n- **GPU Support**: \n  - NVIDIA (CUDA) \n  - AMD (ROCm)\n  - Apple (Metal)\n  - Intel (oneAPI)\n- **Flexible Input**: Works with arrays of various dimensions (1D, 2D, 3D)\n\n## Next Steps\n\n- Explore the [User Guide](guide.qmd) for comprehensive documentation\n- Check the [API Reference](api.qmd) for detailed function information\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}