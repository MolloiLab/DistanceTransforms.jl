---
title: "API Reference"
sidebar: julia
engine: julia
format:
  html:
    toc: true
---

# API Reference

This page documents all the exported functions and types in DistanceTransforms.jl.

## Setup

```{julia}
using DistanceTransforms
using Markdown
```

## Core Functions

### transform

```{julia}
#| echo: false
Markdown.parse("""
```julia
transform(x::AbstractArray{T,N}; threaded::Bool=true) where {T,N}
```

$(replace(string(Docs.doc(DistanceTransforms.transform)), r"```julia.*?```"s => ""))
""")
```

**Example:**

```{julia}
# Create a sample binary array
arr = [
    0 1 1 0 1
    0 0 0 1 0
    1 1 0 0 0
]

# Convert to boolean indicator
bool_arr = boolean_indicator(arr)

# Apply distance transform
result = transform(bool_arr)
result
```

### boolean_indicator

```{julia}
#| echo: false
Markdown.parse("""
```julia
boolean_indicator(arr::AbstractArray{T,N}) where {T,N}
```

$(replace(string(Docs.doc(DistanceTransforms.boolean_indicator)), r"```julia.*?```"s => ""))
""")
```

**Example:**

```{julia}
# Create a sample array
arr = [
    0 1 1 0 1
    0 0 0 1 0
    1 1 0 0 0
]

# Convert to boolean indicator
bool_arr = boolean_indicator(arr)
bool_arr
```

## GPU Support

DistanceTransforms.jl automatically uses GPU-specific implementations when GPU arrays are provided. This is handled through Julia's multiple dispatch system.

**Example with CUDA:**

```julia
using CUDA
using DistanceTransforms

# This example will only run if CUDA is available
if CUDA.functional()
    # Create GPU array
    gpu_arr = CuArray([0 1 1 0; 0 0 1 0; 1 0 0 0])
    
    # Apply boolean_indicator
    gpu_bool = boolean_indicator(gpu_arr)
    
    # Apply transform (automatically uses GPU implementation)
    gpu_result = transform(gpu_bool)
    
    # Bring result back to CPU if needed
    cpu_result = Array(gpu_result)
end
```

Similar implementations are available for AMD GPUs (via `AMDGPU.jl`) and Apple Metal (via `Metal.jl`).

## Advanced Configuration

### Threaded Operation

The `transform` function can be configured to use or disable multi-threading:

```{julia}
# With multi-threading (default)
result_threaded = transform(boolean_indicator(arr), threaded = true)

# Without multi-threading
result_single = transform(boolean_indicator(arr), threaded = false)

# Verify they produce the same results
all(result_threaded .== result_single)
```

## Full Function List

```{julia}
#| echo: false
exported_functions = filter(name -> name != :DistanceTransforms, names(DistanceTransforms))

function generate_function_list(functions)
    md_string = "| Function | Description |\n|----------|-------------|\n"
    
    for func in functions
        doc_string = string(Docs.doc(eval(:(DistanceTransforms.$func))))
        first_line = split(doc_string, '\n')[1]
        description = replace(first_line, r"^`.*?`\s*[-â€“]\s*" => "")
        
        md_string *= "| `$func` | $description |\n"
    end
    
    return Markdown.parse(md_string)
end

generate_function_list(exported_functions)
```